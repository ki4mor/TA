# ex: set ro:
# DO NOT EDIT.
# generated by smc (http://smc.sourceforge.net/)
# from file : AutomataAnalyzer.sm

import statemap


class AutomataAnalyzerState(statemap.State):

    def Entry(self, fsm):
        pass

    def Exit(self, fsm):
        pass

    def Digit(self, fsm, ch):
        self.Default(fsm)

    def DotS(self, fsm):
        self.Default(fsm)

    def EOS(self, fsm):
        self.Default(fsm)

    def Letter(self, fsm, ch):
        self.Default(fsm)

    def SpaceS(self, fsm):
        self.Default(fsm)

    def Start(self, fsm):
        self.Default(fsm)

    def Unknown(self, fsm):
        self.Default(fsm)

    def Default(self, fsm):
        msg = "\n\tState: %s\n\tTransition: %s" % (
            fsm.getState().getName(), fsm.getTransition())
        raise statemap.TransitionUndefinedException(msg)

class MainMap_Default(AutomataAnalyzerState):

    def Start(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.ClearSMC()
        finally:
            fsm.setState(MainMap.Start)
            fsm.getState().Entry(fsm)


    def Letter(self, fsm, ch):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Unacceptable()
        finally:
            fsm.setState(MainMap.Error)
            fsm.getState().Entry(fsm)


    def Digit(self, fsm, ch):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Unacceptable()
        finally:
            fsm.setState(MainMap.Error)
            fsm.getState().Entry(fsm)


    def SpaceS(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Unacceptable()
        finally:
            fsm.setState(MainMap.Error)
            fsm.getState().Entry(fsm)


    def DotS(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Unacceptable()
        finally:
            fsm.setState(MainMap.Error)
            fsm.getState().Entry(fsm)


    def Unknown(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Unacceptable()
        finally:
            fsm.setState(MainMap.Error)
            fsm.getState().Entry(fsm)


    def EOS(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Unacceptable()
        finally:
            fsm.setState(MainMap.Error)
            fsm.getState().Entry(fsm)


class MainMap_Start(MainMap_Default):

    def Letter(self, fsm, ch):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.InsToBuf(ch)
            ctxt.IncLength()
        finally:
            fsm.setState(MainMap.Name)
            fsm.getState().Entry(fsm)


    def SpaceS(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(MainMap.Start)
        fsm.getState().Entry(fsm)


class MainMap_Space_before_type(MainMap_Default):

    def Letter(self, fsm, ch):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.InsToBuf(ch)
        finally:
            fsm.setState(MainMap.Type)
            fsm.getState().Entry(fsm)


    def SpaceS(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(MainMap.Space_before_type)
        fsm.getState().Entry(fsm)


class MainMap_Name(MainMap_Default):

    def Digit(self, fsm, ch):
        ctxt = fsm.getOwner()
        if ctxt.LessThan32() :
            endState = fsm.getState()
            fsm.clearState()
            try:
                ctxt.InsToBuf(ch)
                ctxt.IncLength()
            finally:
                fsm.setState(endState)
        else:
            MainMap_Default.Digit(self, fsm, ch)
        
    def Letter(self, fsm, ch):
        ctxt = fsm.getOwner()
        if ctxt.LessThan32() :
            endState = fsm.getState()
            fsm.clearState()
            try:
                ctxt.InsToBuf(ch)
                ctxt.IncLength()
            finally:
                fsm.setState(endState)
        else:
            MainMap_Default.Letter(self, fsm, ch)
        
    def SpaceS(self, fsm):
        ctxt = fsm.getOwner()
        if ctxt.LessThan32() :
            fsm.getState().Exit(fsm)
            fsm.clearState()
            try:
                ctxt.InsName()
                ctxt.ClearBuf()
                ctxt.ClearLength()
            finally:
                fsm.setState(MainMap.Space_before_type)
                fsm.getState().Entry(fsm)
        else:
            MainMap_Default.SpaceS(self, fsm)
        
class MainMap_Type(MainMap_Default):

    def SpaceS(self, fsm):
        ctxt = fsm.getOwner()
        if ctxt.CheckTypeA() :
            fsm.getState().Exit(fsm)
            fsm.clearState()
            try:
                ctxt.InsType()
                ctxt.ClearBuf()
            finally:
                fsm.setState(MainMap.Space_after_type_A)
                fsm.getState().Entry(fsm)
        elif ctxt.CheckTypeC() :
            fsm.getState().Exit(fsm)
            fsm.clearState()
            try:
                ctxt.InsType()
                ctxt.ClearBuf()
            finally:
                fsm.setState(MainMap.Space_after_type_C)
                fsm.getState().Entry(fsm)
        else:
            MainMap_Default.SpaceS(self, fsm)
        
class MainMap_Space_after_type_A(MainMap_Default):

    def Digit(self, fsm, ch):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.InsToBuf(ch)
            ctxt.InsCount()
        finally:
            fsm.setState(MainMap.Number)
            fsm.getState().Entry(fsm)


    def SpaceS(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(MainMap.Space_after_type_A)
        fsm.getState().Entry(fsm)


class MainMap_Space_after_type_C(MainMap_Default):

    def Letter(self, fsm, ch):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.InsToBuf(ch)
            ctxt.IncLength()
        finally:
            fsm.setState(MainMap.Name_of_resource)
            fsm.getState().Entry(fsm)


    def SpaceS(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(MainMap.Space_after_type_C)
        fsm.getState().Entry(fsm)


class MainMap_Number(MainMap_Default):

    def Digit(self, fsm, ch):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.InsToBuf(ch)
        finally:
            fsm.setState(MainMap.Number)
            fsm.getState().Entry(fsm)


    def DotS(self, fsm):
        ctxt = fsm.getOwner()
        if ctxt.CheckNumber() :
            fsm.getState().Exit(fsm)
            fsm.clearState()
            try:
                ctxt.ClearBuf()
            finally:
                fsm.setState(MainMap.Dot)
                fsm.getState().Entry(fsm)
        else:
            MainMap_Default.DotS(self, fsm)
        
    def EOS(self, fsm):
        ctxt = fsm.getOwner()
        if ctxt.CheckCount() :
            fsm.getState().Exit(fsm)
            fsm.clearState()
            try:
                ctxt.Acceptable()
            finally:
                fsm.setState(MainMap.OK)
                fsm.getState().Entry(fsm)
        else:
            MainMap_Default.EOS(self, fsm)
        
    def SpaceS(self, fsm):
        ctxt = fsm.getOwner()
        if ctxt.CheckCount() :
            fsm.getState().Exit(fsm)
            # No actions.
            pass
            fsm.setState(MainMap.Space)
            fsm.getState().Entry(fsm)
        else:
            MainMap_Default.SpaceS(self, fsm)
        
class MainMap_Dot(MainMap_Default):

    def Digit(self, fsm, ch):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.InsCount()
            ctxt.InsToBuf(ch)
        finally:
            fsm.setState(MainMap.Number)
            fsm.getState().Entry(fsm)


class MainMap_Name_of_resource(MainMap_Default):

    def Digit(self, fsm, ch):
        ctxt = fsm.getOwner()
        if ctxt.LessThan32() :
            endState = fsm.getState()
            fsm.clearState()
            try:
                ctxt.InsToBuf(ch)
                ctxt.IncLength()
            finally:
                fsm.setState(endState)
        else:
            MainMap_Default.Digit(self, fsm, ch)
        
    def EOS(self, fsm):
        ctxt = fsm.getOwner()
        if ctxt.LessThan32() :
            fsm.getState().Exit(fsm)
            fsm.clearState()
            try:
                ctxt.InsNameOfRes()
                ctxt.Acceptable()
            finally:
                fsm.setState(MainMap.OK)
                fsm.getState().Entry(fsm)
        else:
            MainMap_Default.EOS(self, fsm)
        
    def Letter(self, fsm, ch):
        ctxt = fsm.getOwner()
        if ctxt.LessThan32() :
            endState = fsm.getState()
            fsm.clearState()
            try:
                ctxt.InsToBuf(ch)
                ctxt.IncLength()
            finally:
                fsm.setState(endState)
        else:
            MainMap_Default.Letter(self, fsm, ch)
        
    def SpaceS(self, fsm):
        ctxt = fsm.getOwner()
        if ctxt.LessThan32() :
            fsm.getState().Exit(fsm)
            fsm.clearState()
            try:
                ctxt.InsNameOfRes()
            finally:
                fsm.setState(MainMap.Space)
                fsm.getState().Entry(fsm)
        else:
            MainMap_Default.SpaceS(self, fsm)
        
class MainMap_Space(MainMap_Default):

    def EOS(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Acceptable()
        finally:
            fsm.setState(MainMap.OK)
            fsm.getState().Entry(fsm)


    def SpaceS(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(MainMap.Space)
        fsm.getState().Entry(fsm)


class MainMap_Error(MainMap_Default):

    def EOS(self, fsm):
        ctxt = fsm.getOwner()
        endState = fsm.getState()
        fsm.clearState()
        try:
            ctxt.Unacceptable()
        finally:
            fsm.setState(endState)


class MainMap_OK(MainMap_Default):

    def EOS(self, fsm):
        ctxt = fsm.getOwner()
        endState = fsm.getState()
        fsm.clearState()
        try:
            ctxt.Acceptable()
        finally:
            fsm.setState(endState)


class MainMap(object):

    Start = MainMap_Start('MainMap.Start', 0)
    Space_before_type = MainMap_Space_before_type('MainMap.Space_before_type', 1)
    Name = MainMap_Name('MainMap.Name', 2)
    Type = MainMap_Type('MainMap.Type', 3)
    Space_after_type_A = MainMap_Space_after_type_A('MainMap.Space_after_type_A', 4)
    Space_after_type_C = MainMap_Space_after_type_C('MainMap.Space_after_type_C', 5)
    Number = MainMap_Number('MainMap.Number', 6)
    Dot = MainMap_Dot('MainMap.Dot', 7)
    Name_of_resource = MainMap_Name_of_resource('MainMap.Name_of_resource', 8)
    Space = MainMap_Space('MainMap.Space', 9)
    Error = MainMap_Error('MainMap.Error', 10)
    OK = MainMap_OK('MainMap.OK', 11)
    Default = MainMap_Default('MainMap.Default', -1)

class AutomataAnalyzer_sm(statemap.FSMContext):

    def __init__(self, owner):
        statemap.FSMContext.__init__(self, MainMap.Start)
        self._owner = owner

    def __getattr__(self, attrib):
        def trans_sm(*arglist):
            self._transition = attrib
            getattr(self.getState(), attrib)(self, *arglist)
            self._transition = None
        return trans_sm

    def enterStartState(self):
        self._state.Entry(self)

    def getOwner(self):
        return self._owner

# Local variables:
#  buffer-read-only: t
# End:
